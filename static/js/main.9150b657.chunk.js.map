{"version":3,"sources":["components/Navbar.js","components/Movie.js","components/Movies.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Navbar","className","href","src","logo","width","height","alt","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Movie","movie","useState","Released","Actors","Director","Plot","Genre","Runtime","number","movieSelected","setMovieSelected","show","setShow","getMovie","imdbID","axios","get","then","response","data","imdbRating","catch","e","console","log","modal","onClick","Poster","Title","Year","count","size","edit","isHalf","value","activeColor","Type","style","backgroundImage","hover","overlay","icon","Modal","isOpen","position","left","transform","Movies","search","setsearch","movies","setMovies","loading","setLoading","error","setError","useEffect","document","title","getMovies","a","preventDefault","Search","Error","onSubmit","placeholder","onChange","target","Spinner","animation","variant","map","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","message","module","exports"],"mappings":"uNAGaA,EAAS,kBAClB,yBAAKC,UAAU,+CAEX,uBAAGA,UAAU,eAAeC,KAAK,2BAAjC,IAA6D,yBAAKD,UAAU,aAAY,yBAAKE,IAAKC,IAAMC,MAAM,KAAKC,OAAO,KAAKC,IAAI,QAAQN,UAAU,8BAAxF,kBAE7D,4BAAQA,UAAU,iBAAiBO,KAAK,SAASC,cAAY,WAAWC,cAAY,sBAAsBC,gBAAc,qBAAqBC,gBAAc,QAAQC,aAAW,qBAC1K,0BAAMZ,UAAU,yBAEpB,yBAAKA,UAAU,2BAA2Ba,GAAG,yB,4FCJxCC,EAAQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEUC,mBAAS,CAC/CC,SAAU,GACVC,OAAQ,GACRC,SAAU,GACVC,KAAM,GACNC,MAAO,GACPC,QAAS,GACTC,OAAQ,IAToB,mBAEzBC,EAFyB,KAEVC,EAFU,OAYRT,oBAAS,GAZD,mBAYzBU,EAZyB,KAYnBC,EAZmB,KAsB1BC,EAAW,SAACC,GAEdC,IAAMC,IAAI,iEAAmEF,EAAS,oBACjFG,MAAK,SAAAC,GACFR,EAAiB,2BACVD,GADS,IAEZP,SAAUgB,EAASC,KAAKjB,SACxBC,OAAQe,EAASC,KAAKhB,OACtBC,SAAUc,EAASC,KAAKf,SACxBC,KAAMa,EAASC,KAAKd,KACpBC,MAAOY,EAASC,KAAKb,MACrBC,QAASW,EAASC,KAAKZ,QACvBa,WAAYF,EAASC,KAAKC,cArBjBR,GAAQ,MAyBxBS,OAAM,SAAAC,GACHC,QAAQC,IAAIF,OAMlBG,EACF,kBAAC,WAAD,KAEI,yBAAKxC,UAAU,cACX,yBAAKA,UAAU,gBACX,4BAAQyC,QApCJ,kBAAMd,GAAQ,KAoClB,KAEA,yBAAK3B,UAAU,gBACX,yBAAKA,UAAU,YAAYE,IAAKa,EAAM2B,OAAQpC,IAAKS,EAAM4B,QACzD,4BAAK5B,EAAM4B,OACX,4BAAK5B,EAAM6B,KAAX,KAAmBpB,EAAcL,WAGrC,yBAAKnB,UAAU,cAEX,kBAAC,IAAD,CACI6C,MAAO,GACPC,KAAM,GACNC,MAAM,EACNC,QAAQ,EACRC,MAAOzB,EAAcW,WACrBe,YAAY,YAGhB,0BAAMlD,UAAU,WAAWwB,EAAcF,SACzC,uBAAGtB,UAAU,QAAQe,EAAMoC,MAC3B,uBAAGnD,UAAU,QAAQwB,EAAcJ,QAG3C,yBAAKpB,UAAU,wBAAwBoD,MAAO,CAAEC,gBAAgB,OAAD,OAAStC,EAAM2B,OAAf,UAQ3E,OAEI,kBAAC,IAAD,CAAS1C,UAAU,oCAAoCyC,QAAS,kBAAMb,EAASb,EAAMc,UACjF,yBACIyB,OAAK,EACLC,QAAQ,eACRrD,IAAKa,EAAM2B,OAAQpC,IAAKS,EAAM4B,QAGlC,kBAAC,IAAD,KAEI,wBAAI3C,UAAU,cACV,kBAAC,IAAD,CAASwD,KAAK,SADlB,IAC6BzC,EAAM4B,OAGnC,kBAAC,IAAD,CAAc3C,UAAU,QACnBe,EAAM6B,MAGX,kBAAC,IAAD,CAAc5C,UAAU,QACnBe,EAAMoC,OAIf,kBAACM,EAAA,EAAD,CAAOzD,UAAU,QAAQ0D,OAAQhC,EAAM0B,MA1F3B,CAChBO,SAAU,WACVC,KAAM,MACNC,UAAW,yBAwFFrB,K,SC3GJsB,EAAS,WAAO,IAAD,EAEI9C,mBAAS,IAFb,mBAEjB+C,EAFiB,KAETC,EAFS,OAGIhD,mBAAS,IAHb,mBAGjBiD,EAHiB,KAGTC,EAHS,OAIMlD,oBAAS,GAJf,mBAIjBmD,EAJiB,KAIRC,EAJQ,OAKEpD,mBAAS,IALX,mBAKjBqD,EALiB,KAKVC,EALU,KAOxBC,qBAAU,WACNC,SAASC,MAAQ,iBAElB,IAEH,IAAMC,EAAS,uCAAG,WAAOrC,GAAP,SAAAsC,EAAA,yDACdtC,EAAEuC,iBAEa,KAAXb,EAHU,uBAIVO,EAAS,+BACTJ,EAAU,IALA,kBAMHD,GANG,cASdG,GAAW,GATG,SAWRtC,IAAMC,IAAI,6BAA+BgC,EAAS,oBACnD/B,MAAK,SAAAC,GACFiC,EAAUjC,EAASC,KAAK2C,QACxBP,EAASrC,EAASC,KAAK4C,OACvBV,GAAW,MAEdhC,OAAM,SAAAC,GACHC,QAAQC,IAAIF,MAlBN,2CAAH,sDAsBf,OAEI,yBAAKrC,UAAU,mBAEX,yBAAKA,UAAU,8BAEX,yBAAKA,UAAU,wBACX,0BAAM+E,SAAU,SAAA1C,GAAC,OAAIqC,EAAUrC,KAC3B,2BAAO9B,KAAK,QAAQP,UAAU,aAAagF,YAAY,SAASC,SAAU,SAAA5C,GAAC,OAAK2B,EAAU3B,EAAE6C,OAAOjC,UACnG,2BAAOjD,UAAU,cAAjB,WAGQ,KAAVqE,EAAgB,GAAK,yBAAKrE,UAAU,oBAAoBqE,KAKlE,kBAAC,IAAD,KAEI,kBAAC,IAAD,CAAQrE,UAAU,8BAEbmE,EAAU,yBAAKnE,UAAU,WAAU,kBAACmF,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,UAEpEpB,GAAWA,EAAOqB,KAAI,SAAAvE,GAElB,OAAO,kBAAC,EAAD,CAAOwE,IAAKxE,EAAMc,OAAQd,MAAOA,WChDrDyE,MAVf,WAEE,OACE,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,OCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFxB,SAASyB,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpE,MAAK,SAAAqE,GACJA,EAAaC,gBAEdlE,OAAM,SAAAiC,GACL/B,QAAQ+B,MAAMA,EAAMkC,a,mBEzI5BC,EAAOC,QAAU,IAA0B,kC","file":"static/js/main.9150b657.chunk.js","sourcesContent":["import React from 'react';\r\nimport logo from '../logo.svg';\r\n\r\nexport const Navbar = () => (\r\n    <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n\r\n        <a className=\"navbar-brand\" href=\"https://es.reactjs.org/\" > <div className=\"container\"><img src={logo} width=\"30\" height=\"30\" alt=\"React\" className=\" d-inline-block align-top\" />\r\n            Movie Finder </div></a>\r\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNavAltMarkup\" aria-controls=\"navbarNavAltMarkup\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n            <span className=\"navbar-toggler-icon\" />\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarNavAltMarkup\">\r\n        </div>\r\n    </nav >\r\n)","import React, { useState, Fragment } from 'react';\r\nimport ReactStars from \"react-rating-stars-component\";\r\nimport axios from 'axios';\r\nimport { Modal } from 'reactstrap';\r\nimport { MDBCard, MDBCardBody, MDBCardTitle, MDBIcon } from 'mdbreact';\r\n\r\n\r\nexport const Movie = ({ movie }) => {\r\n\r\n    const [movieSelected, setMovieSelected] = useState({\r\n        Released: '',\r\n        Actors: '',\r\n        Director: '',\r\n        Plot: '',\r\n        Genre: '',\r\n        Runtime: '',\r\n        number: 1,\r\n    });\r\n\r\n    const [show, setShow] = useState(false);\r\n    const handleShow = () => setShow(true);\r\n    const handleClose = () => setShow(false);\r\n\r\n    const modalStyles = {\r\n        position: \"absolute\",\r\n        left: '20%',\r\n        transform: 'translate(-50%, 20%)'\r\n    }\r\n\r\n    const getMovie = (imdbID) => {\r\n\r\n        axios.get(\"https://cors-anywhere.herokuapp.com/http://www.omdbapi.com/?i=\" + imdbID + \"&apikey=7cba9c29\")\r\n            .then(response => {\r\n                setMovieSelected({\r\n                    ...movieSelected,\r\n                    Released: response.data.Released,\r\n                    Actors: response.data.Actors,\r\n                    Director: response.data.Director,\r\n                    Plot: response.data.Plot,\r\n                    Genre: response.data.Genre,\r\n                    Runtime: response.data.Runtime,\r\n                    imdbRating: response.data.imdbRating\r\n                });\r\n                handleShow();\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            })\r\n\r\n    }\r\n\r\n\r\n    const modal = (\r\n        <Fragment>\r\n\r\n            <div className=\"movie_card\" >\r\n                <div className=\"info_section\">\r\n                    <button onClick={handleClose}>X</button>\r\n\r\n                    <div className=\"movie_header\">\r\n                        <img className=\"locandina\" src={movie.Poster} alt={movie.Title} />\r\n                        <h1>{movie.Title}</h1>\r\n                        <h4>{movie.Year}, {movieSelected.Director}</h4>\r\n                    </div>\r\n\r\n                    <div className=\"movie_desc\">\r\n\r\n                        <ReactStars\r\n                            count={10}\r\n                            size={24}\r\n                            edit={false}\r\n                            isHalf={true}\r\n                            value={movieSelected.imdbRating}\r\n                            activeColor=\"#ffd700\"\r\n                        />\r\n\r\n                        <span className=\"minutes\">{movieSelected.Runtime}</span>\r\n                        <p className=\"type\">{movie.Type}</p>\r\n                        <p className=\"text\">{movieSelected.Plot}</p>\r\n                    </div>\r\n                </div>\r\n                <div className=\"blur_back bright_back\" style={{ backgroundImage: `url(${movie.Poster})` }}></div>\r\n            </div>\r\n\r\n\r\n\r\n        </Fragment>\r\n    )\r\n\r\n    return (\r\n\r\n        <MDBCard className=\"card2 bg-transparent border-white\" onClick={() => getMovie(movie.imdbID)} >\r\n            <img\r\n                hover\r\n                overlay='white-slight'\r\n                src={movie.Poster} alt={movie.Title}\r\n            />\r\n\r\n            <MDBCardBody >\r\n\r\n                <h5 className='white-text'>\r\n                    <MDBIcon icon='film' /> {movie.Title}\r\n                </h5>\r\n\r\n                <MDBCardTitle className=\"lead\">\r\n                    {movie.Year}\r\n                </MDBCardTitle>\r\n\r\n                <MDBCardTitle className=\"lead\">\r\n                    {movie.Type}\r\n                </MDBCardTitle>\r\n\r\n            </MDBCardBody>\r\n            <Modal className=\"Modal\" isOpen={show} style={modalStyles}>\r\n                {modal}\r\n            </Modal>\r\n        </MDBCard>\r\n\r\n    )\r\n\r\n}\r\n\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport { Movie } from './Movie';\r\nimport { MDBCardGroup, MDBRow } from 'mdbreact';\r\nimport { Spinner } from 'reactstrap';\r\n\r\n\r\nexport const Movies = () => {\r\n\r\n    const [search, setsearch] = useState('');\r\n    const [movies, setMovies] = useState([]);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n\r\n    useEffect(() => {\r\n        document.title = 'Movie Finder';\r\n\r\n    }, []);\r\n\r\n    const getMovies = async (e) => {\r\n        e.preventDefault()\r\n\r\n        if (search === \"\") {\r\n            setError(\"Please insert a name movie.\");\r\n            setMovies([]);\r\n            return movies;\r\n        }\r\n\r\n        setLoading(true);\r\n\r\n        await axios.get(\"http://www.omdbapi.com/?s=\" + search + \"&apikey=7cba9c29\")\r\n            .then(response => {\r\n                setMovies(response.data.Search);\r\n                setError(response.data.Error);\r\n                setLoading(false);\r\n            })\r\n            .catch(e => {\r\n                console.log(e);\r\n            })\r\n    }\r\n\r\n    return (\r\n\r\n        <div className=\"container-fluid\">\r\n\r\n            <div className=\"row justify-content-center\">\r\n\r\n                <div className=\"form_group field m-3\">\r\n                    <form onSubmit={e => getMovies(e)}>\r\n                        <input type=\"input\" className=\"form_field\" placeholder=\"Search\" onChange={e => (setsearch(e.target.value))} />\r\n                        <label className=\"form_label\">Search</label>\r\n                    </form>\r\n\r\n                    {(error === '') ? '' : <div className=\"mt-4 text-center\">{error}</div>}\r\n                </div>\r\n\r\n            </div>\r\n\r\n            <MDBCardGroup>\r\n\r\n                <MDBRow className=\"row justify-content-center\">\r\n\r\n                    {loading ? <div className=\"mx-auto\"><Spinner animation=\"border\" variant=\"info\" /></div> :\r\n\r\n                        movies && (movies.map(movie => {\r\n\r\n                            return <Movie key={movie.imdbID} movie={movie} />\r\n\r\n                        }))\r\n\r\n                    }\r\n\r\n                </MDBRow >\r\n\r\n            </MDBCardGroup >\r\n\r\n        </div >\r\n    )\r\n}\r\n\r\n\r\n","import React, { Fragment } from 'react';\nimport './App.css'\nimport '@fortawesome/fontawesome-free/css/all.min.css';\nimport 'bootstrap-css-only/css/bootstrap.min.css';\nimport 'mdbreact/dist/css/mdb.css';\nimport { Navbar } from './components/Navbar'\nimport { Movies } from './components/Movies';\n\nfunction App() {\n\n  return (\n    <Fragment >\n      <Navbar />\n      <Movies />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootswatch/dist/cyborg/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}